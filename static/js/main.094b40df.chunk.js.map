{"version":3,"sources":["utils/globals.ts","hooks/cases.ts","hooks/settings.ts","Country.tsx","CameraControls.tsx","hooks/countries.ts","Visuals.tsx","utils/theme.ts","DateSelector.tsx","App.tsx","index.tsx"],"names":["API_DATE_FORMAT","GLOBE_RADIUS","PUBLIC_URL","process","useCases","create","set","countries","loaded","load","a","fetch","response","json","apiData","item","country","newCases","getLoaded","state","getLoad","useSettings","maxDate","subDays","Date","focusDate","minDate","setFocusDate","lonLatToXYZ","lon","lat","phi","Math","PI","theta","x","sin","cos","z","Country","code","features","theme","useTheme","countryData","useRef","getState","worldData","date","format","targetColor","THREE","minLevel","maxLevelColor","maxLevel","useEffect","subscribe","current","material","color","meshes","coordinates","vertices","coordinate","xyz","push","geometry","setAttribute","lineProps","length","useFrame","newCasesPerMillionSmoothed","worldNewCasesPerMillionSmoothed","index","lerp","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","_state","update","ref","args","useCountries","persist","rawCountries","map","name","geography","type","polygon","ring","InnerSphere","background","side","transparent","opacity","Visuals","data","useCallback","onCreated","setClearColor","colorManagement","Provider","value","Stars","fade","factor","PerspectiveCamera","makeDefault","near","far","fov","position","Container","styled","div","ControlsContainer","Slider","input","TextContainer","Control","button","REVERSE_ICONS","0","1","5","NEXT_REVERSE_SPEED","FORWARD_ICONS","NEXT_FORWARD_SPEED","DateSelector","useState","animationSpeed","setAnimationSpeed","averageNewCases","interval","setInterval","nextDate","addDays","clearInterval","max","differenceInDays","setReverse","speed","setForward","onClick","disabled","min","onChange","target","parseInt","round","GlobalStyle","createGlobalStyle","reset","App","useCountryData","useCaseData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.094b40df.chunk.js","sourcesContent":["export const API_DATE_FORMAT = 'yyyyMMdd'\nexport const WORLD_CODE = 'OWID_WRL'\nexport const GLOBE_RADIUS = 100\nexport const PUBLIC_URL = process.env.PUBLIC_URL\n","import { useEffect } from 'react'\nimport { PUBLIC_URL } from 'utils/globals'\nimport create from 'zustand'\n\ntype DataByDate = Record<string, number>\n\ninterface ApiCountry {\n  country: string\n  newCases: DataByDate\n}\n\nexport type State = {\n  countries: Record<string, DataByDate>\n  loaded: boolean\n  load: () => void\n}\n\nexport const useCases = create<State>((set) => ({\n  countries: {},\n  loaded: false,\n  load: async () => {\n    const response = await fetch(`${PUBLIC_URL}/api/cases.json`)\n    const apiData = (await response.json()) as ApiCountry[]\n    const countries: State['countries'] = {}\n\n    for (const item of apiData) {\n      const { country, newCases } = item\n      countries[country] = newCases\n    }\n\n    set({ countries, loaded: true })\n  },\n}))\n\nconst getLoaded = (state: State) => state.loaded\nconst getLoad = (state: State) => state.load\n\nexport const useCaseData = () => {\n  const loaded = useCases(getLoaded)\n  const load = useCases(getLoad)\n\n  useEffect(() => {\n    if (!loaded) {\n      load()\n    }\n  }, [load, loaded])\n}\n","import subDays from 'date-fns/subDays'\nimport create from 'zustand'\n\nexport type State = {\n  focusDate: Date\n  minDate: Date\n  maxDate: Date\n  setFocusDate: (date: Date) => void\n}\n\nexport const useSettings = create<State>((set) => {\n  const maxDate = subDays(new Date(), 2)\n\n  return {\n    focusDate: maxDate,\n    minDate: new Date(2020, 0, 1),\n    maxDate,\n    setFocusDate: (focusDate) => set({ focusDate }),\n  }\n})\n","import * as THREE from 'three'\nimport type { Country as CountryData } from 'hooks/countries'\nimport { useCases } from 'hooks/cases'\nimport type { State as CasesState } from 'hooks/cases'\nimport { useSettings } from 'hooks/settings'\nimport type { State as SettingsState } from 'hooks/settings'\nimport { useEffect, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { useTheme } from 'styled-components'\nimport format from 'date-fns/format'\nimport { API_DATE_FORMAT, WORLD_CODE, GLOBE_RADIUS } from 'utils/globals'\n\nconst lonLatToXYZ = (lon: number, lat: number): [number, number, number] => {\n  const phi = (90 - lat) * (Math.PI / 180)\n  const theta = (lon + 180) * (Math.PI / 180)\n\n  const x = -(GLOBE_RADIUS * Math.sin(phi) * Math.cos(theta))\n  const z = GLOBE_RADIUS * Math.sin(phi) * Math.sin(theta)\n  const y = GLOBE_RADIUS * Math.cos(phi)\n\n  return [x, y, z]\n}\n\nexport const Country: React.FC<{ country: CountryData }> = ({ country }) => {\n  const { code, features } = country\n\n  const theme = useTheme()\n  const countryData = useRef(useCases.getState().countries[code] || {})\n  const worldData = useRef(useCases.getState().countries[WORLD_CODE] || {})\n  const date = useRef(format(useSettings.getState().focusDate, API_DATE_FORMAT))\n\n  const targetColor = useRef(new THREE.Color(theme.minLevel))\n  const maxLevelColor = new THREE.Color(theme.maxLevel)\n\n  useEffect(\n    () =>\n      useCases.subscribe(\n        (countries: CasesState['countries']) => {\n          countryData.current = countries[code] || {}\n          worldData.current = countries[WORLD_CODE] || {}\n        },\n        (state) => state.countries\n      ),\n    [code]\n  )\n\n  useEffect(\n    () =>\n      useSettings.subscribe(\n        (focusDate: SettingsState['focusDate']) => (date.current = format(focusDate, API_DATE_FORMAT)),\n        (state) => state.focusDate\n      ),\n    [code]\n  )\n\n  const material = new THREE.LineBasicMaterial({ color: theme.minLevel })\n\n  let meshes = []\n\n  for (const feature of features) {\n    const { coordinates } = feature\n\n    const vertices = []\n    for (const coordinate of coordinates) {\n      const xyz = lonLatToXYZ(...coordinate)\n      vertices.push(...xyz)\n    }\n\n    const geometry = new THREE.BufferGeometry()\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3))\n\n    const lineProps: any = { geometry, material } // TS thinks this is SVG line element\n\n    meshes.push(<line key={meshes.length} {...lineProps} />)\n  }\n\n  useFrame(() => {\n    const newCasesPerMillionSmoothed = countryData.current[date.current] || 0\n    const worldNewCasesPerMillionSmoothed = worldData.current[date.current] || 0\n\n    let index = 0\n    if (worldNewCasesPerMillionSmoothed > 0) {\n      index = newCasesPerMillionSmoothed / (worldNewCasesPerMillionSmoothed * 5)\n    }\n\n    targetColor.current = new THREE.Color(theme.minLevel).lerp(maxLevelColor, index)\n    material.color.lerp(targetColor.current, 0.1)\n  })\n\n  return <group>{meshes}</group>\n}\n","import React, { useRef } from 'react'\nimport { useFrame, extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nextend({ OrbitControls })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: React.DetailedHTMLProps<any, any>\n    }\n  }\n}\n\nexport const CameraControls: React.FC<{}> = () => {\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree()\n  const controls = useRef<OrbitControls>()\n  useFrame((_state) => controls.current?.update())\n  return <orbitControls ref={controls} args={[camera, domElement]} />\n}\n","import { useEffect } from 'react'\nimport create from 'zustand'\nimport { persist } from 'zustand/middleware'\nimport map from 'lodash/map'\nimport { PUBLIC_URL } from 'utils/globals'\n\ntype Coordinate = [lon: number, lat: number]\n\ntype MultiPolygon = {\n  type: 'MultiPolygon'\n  coordinates: Coordinate[][][]\n}\n\ntype Polygon = {\n  type: 'Polygon'\n  coordinates: Coordinate[][]\n}\n\ninterface ApiCountry {\n  code: string\n  name: string\n  geography: MultiPolygon | Polygon\n}\n\ninterface Feature {\n  coordinates: Coordinate[]\n}\n\nexport interface Country {\n  code: string\n  name: string\n  features: Feature[]\n}\n\ntype State = {\n  countries: Country[]\n  loaded: boolean\n  load: () => void\n}\n\nexport const useCountries = create<State>(\n  persist(\n    (set) => ({\n      countries: [],\n      loaded: false,\n      load: async () => {\n        const response = await fetch(`${PUBLIC_URL}/api/countries.json`)\n        const rawCountries = (await response.json()) as ApiCountry[]\n\n        const countries = map(rawCountries, (country) => {\n          const { code, name, geography } = country\n\n          let features: Feature[] = []\n\n          if (geography.type === 'MultiPolygon') {\n            for (const polygon of geography.coordinates) {\n              for (const ring of polygon) {\n                features.push({ coordinates: ring })\n              }\n            }\n          } else {\n            for (const ring of geography.coordinates) {\n              features.push({ coordinates: ring })\n            }\n          }\n\n          return { code, name, features }\n        })\n\n        set({ countries, loaded: true })\n      },\n    }),\n    { name: 'countries-base-data' }\n  )\n)\n\nconst getLoaded = (state: State) => state.loaded\nconst getLoad = (state: State) => state.load\n\nexport const useCountryData = () => {\n  const loaded = useCountries(getLoaded)\n  const load = useCountries(getLoad)\n\n  useEffect(() => {\n    if (!loaded) {\n      load()\n    }\n  }, [load, loaded])\n}\n","import React, { useCallback } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { useTheme, ThemeContext } from 'styled-components'\nimport map from 'lodash/map'\nimport { Country } from 'Country'\nimport { Stars } from '@react-three/drei'\nimport { PerspectiveCamera } from '@react-three/drei/PerspectiveCamera'\nimport { CameraControls } from 'CameraControls'\nimport { useCountries } from 'hooks/countries'\nimport { GLOBE_RADIUS } from 'utils/globals'\n\nconst InnerSphere = () => {\n  const theme = useTheme()\n\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[GLOBE_RADIUS * 0.985, 100, 100]} />\n      <meshBasicMaterial color={theme.background} side={2} transparent={true} opacity={0.95} />\n    </mesh>\n  )\n}\n\nexport const Visuals = () => {\n  const theme = useTheme()\n\n  const data = useCountries(useCallback((state) => state.countries, []))\n\n  const countries = map(data, (country) => <Country country={country} key={country.code} />)\n\n  return (\n    <Canvas onCreated={({ gl }) => gl.setClearColor(theme.background)} colorManagement={false}>\n      <ThemeContext.Provider value={theme}>\n        <Stars fade factor={3} />\n        <ambientLight />\n\n        {countries}\n\n        <InnerSphere />\n\n        <PerspectiveCamera makeDefault near={0.001} far={360} fov={90} position={[120, 120, 0]} />\n\n        <CameraControls />\n      </ThemeContext.Provider>\n    </Canvas>\n  )\n}\n","export const theme = {\n  background: '#060606',\n  minLevel: '#ffffff',\n  maxLevel: '#ff0000',\n}\n\nexport type Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n","import { useSettings } from 'hooks/settings'\nimport styled from 'styled-components'\nimport differenceInDays from 'date-fns/differenceInDays'\nimport addDays from 'date-fns/addDays'\nimport format from 'date-fns/format'\nimport { useCases } from 'hooks/cases'\nimport { useCallback, useEffect, useState } from 'react'\nimport { WORLD_CODE, API_DATE_FORMAT } from 'utils/globals'\nimport round from 'lodash/round'\n\nconst Container = styled.div`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  align-items: center;\n\n  color: white;\n`\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  flex-flow: row;\n  width: 40vw;\n`\n\nconst Slider = styled.input`\n  flex: 1;\n`\n\nconst TextContainer = styled.div`\n  text-align: center;\n`\n\nconst Control = styled.button`\n  background-color: transparent;\n  border: none;\n  outline: none;\n`\n\nconst REVERSE_ICONS: Record<number, string> = {\n  '-5': '⏸️',\n  '-1': '⏪️',\n  0: '◀️',\n  1: '◀️',\n  5: '◀️',\n}\n\nconst NEXT_REVERSE_SPEED: Record<number, number> = {\n  '-5': 0,\n  '-1': -5,\n  0: -1,\n  '1': -1,\n  '5': -1,\n}\n\nconst FORWARD_ICONS: Record<number, string> = {\n  '-5': '▶️',\n  '-1': '▶️',\n  0: '▶️',\n  '1': '⏩️',\n  '5': '⏸️',\n}\n\nconst NEXT_FORWARD_SPEED: Record<number, number> = {\n  '-5': 1,\n  '-1': 1,\n  0: 1,\n  '1': 5,\n  '5': 0,\n}\n\nexport const DateSelector = () => {\n  const { minDate, maxDate, focusDate, setFocusDate } = useSettings()\n  const [animationSpeed, setAnimationSpeed] = useState(0)\n\n  const worldData = useCases(useCallback((state) => state.countries[WORLD_CODE] || {}, []))\n\n  const averageNewCases = worldData[format(focusDate, API_DATE_FORMAT)] || 0\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const nextDate = addDays(focusDate, animationSpeed)\n      if (animationSpeed > 0 && nextDate <= maxDate) {\n        setFocusDate(nextDate)\n      } else if (animationSpeed < 0 && nextDate >= minDate) {\n        setFocusDate(nextDate)\n      } else if (animationSpeed < 0) {\n        setFocusDate(minDate)\n        setAnimationSpeed(0)\n      } else if (animationSpeed > 0) {\n        setFocusDate(maxDate)\n        setAnimationSpeed(0)\n      }\n    }, 100)\n    return () => clearInterval(interval)\n  }, [focusDate, animationSpeed])\n\n  const max = differenceInDays(maxDate, minDate)\n  const value = differenceInDays(focusDate, minDate)\n\n  const onChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setAnimationSpeed(0)\n    setFocusDate(addDays(minDate, parseInt(value)))\n  }\n\n  const setReverse = useCallback(() => setAnimationSpeed((speed) => NEXT_REVERSE_SPEED[speed]), [])\n  const setForward = useCallback(() => setAnimationSpeed((speed) => NEXT_FORWARD_SPEED[speed]), [])\n\n  return (\n    <Container>\n      <TextContainer>{format(focusDate, 'dd.MM.yyyy')}</TextContainer>\n      <ControlsContainer>\n        <Control onClick={setReverse} disabled={focusDate === minDate}>\n          {REVERSE_ICONS[animationSpeed]}\n        </Control>\n        <Slider type='range' min={0} max={max} value={value} onChange={onChange} />\n        <Control onClick={setForward} disabled={focusDate === maxDate}>\n          {FORWARD_ICONS[animationSpeed]}\n        </Control>\n      </ControlsContainer>\n      <TextContainer>avg {round(averageNewCases, 2)} new cases / million</TextContainer>\n    </Container>\n  )\n}\n","import { ThemeProvider, createGlobalStyle } from 'styled-components'\nimport { Visuals } from './Visuals'\nimport { theme } from './utils/theme'\nimport reset from 'styled-reset'\nimport { useCountryData } from 'hooks/countries'\nimport { useCaseData } from 'hooks/cases'\nimport { DateSelector } from './DateSelector'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n  }\n`\n\nexport const App = () => {\n  useCountryData()\n  useCaseData()\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Visuals />\n      <DateSelector />\n    </ThemeProvider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}